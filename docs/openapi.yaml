openapi: 3.0.1
info:
  title: Expense Tracker API
  description: |
    Simple Expense Tracker RESTful API built with Spring Boot to allow users to create, read, update, and delete expenses.

    [GitHub Repository](https://github.com/krisnaajiep/springboot-expense-tracker-api)
  contact:
    name: Krisna Ajie
    url: https://krisnaajiep.github.io/
    email: krisnaajiep@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
servers:
- url: http://localhost:8080
  description: ⚠️ Only for local testing
tags:
- name: Auth
  description: User authentication endpoints
- name: Expense
  description: Expense management endpoints
paths:
  /register:
    post:
      tags:
      - Auth
      summary: Register a new user
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid request
        "409":
          description: Email already exists
  /login:
    post:
      tags:
      - Auth
      summary: Login user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid request
        "401":
          description: Invalid credentials
        "429":
          description: Too many login attempts
  /refresh:
    post:
      tags:
        - Auth
      summary: Refresh token
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
        required: true
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          description: Invalid request
        "401":
          description: Invalid refresh token
  /revoke:
    post:
      tags:
        - Auth
      summary: Revoke all refresh tokens
      operationId: revoke
      responses:
        "200":
          description: Tokens revoked successfully
        "401":
          description: Unauthorized
      security:
        - BearerToken: []
  /expenses:
    post:
      tags:
        - Expense
      summary: Create a new expense
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseRequest"
        required: true
      responses:
        "201":
          description: Expense created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      security:
        - BearerToken: []
    get:
      tags:
      - Expense
      summary: List and filter all expenses
      operationId: findAll
      parameters:
      - name: filter
        in: query
        description: |
          The filter type to apply based on the expense date, Available values are:
          * `PAST_WEEK` - Expenses from the past week.
          * `PAST_MONTH` - Expenses from the past month.
          * `LAST_3_MONTHS` - Expenses from the last 3 months.
        required: false
        schema:
          type: string
          enum:
          - PAST_WEEK
          - PAST_MONTH
          - LAST_3_MONTHS
      - name: from
        in: query
        description: The start date for custom expense filtering in the format `yyyy-MM-dd`
        required: false
        schema:
          type: string
          format: date
      - name: to
        in: query
        description: The end date for custom expense filtering in the format `yyyy-MM-dd`
        required: false
        schema:
          type: string
          format: date
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: Expenses listed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResponse"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
      security:
      - BearerToken: []
  /expenses/{expenseId}:
    put:
      tags:
        - Expense
      summary: Update an existing expense
      operationId: update
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExpenseRequest"
        required: true
      responses:
        "200":
          description: Expense updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseResponse"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Expense not found
      security:
        - BearerToken: []
    delete:
      tags:
        - Expense
      summary: Delete an existing expense
      operationId: delete
      parameters:
        - name: expenseId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Expense deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Expense not found
      security:
        - BearerToken: []
components:
  schemas:
    ExpenseRequest:
      required:
      - amount
      - category
      - date
      - description
      type: object
      properties:
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Expense description
          example: Purchase of new computer
        amount:
          minimum: 0.01
          exclusiveMinimum: false
          type: number
          description: Expense amount
          example: 800.0
        category:
          pattern: ^(Groceries|Leisure|Electronics|Utilities|Clothing|Health|Others)$
          type: string
          description: Expense category
          example: Electronics
        date:
          type: string
          description: Expense date
          format: date
          example: 2025-06-30
      description: Expense request body
    ExpenseResponse:
      type: object
      properties:
        id:
          type: string
          description: Expenses ID
          format: uuid
          example: fa0f58de-6ed9-4502-9b34-016d614aa5ab
        description:
          type: string
          description: Expenses description
          example: Purchase of new computer
        amount:
          type: number
          description: Expenses amount
          example: 800.0
        category:
          type: string
          description: Expenses category
          example: Electronics
        date:
          type: string
          description: Expenses date
          format: date
          example: 2025-06-30
      description: Expense response body
    RegisterRequest:
      required:
      - email
      - name
      - password
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          pattern: "^[\\p{L}\\s,.'-]*$"
          type: string
          description: User name
          example: John Doe
        email:
          maxLength: 255
          minLength: 1
          type: string
          description: User email
          example: john@doe.com
        password:
          maxLength: 255
          minLength: 8
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[@_#\\-$]).*$"
          type: string
          description: User password
          example: MyPass_1234
      description: Register request body
    TokenResponse:
      type: object
      properties:
        access-token:
          type: string
          description: Access token
        refresh-token:
          type: string
          description: Refresh token
      description: Token response body
    RefreshTokenRequest:
      required:
      - refresh-token
      type: object
      properties:
        refresh-token:
          minLength: 1
          type: string
          description: Refresh token
      description: Refresh token request body
    LoginRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          minLength: 1
          type: string
          description: User email
          example: john@doe.com
        password:
          minLength: 1
          type: string
          description: User password
          example: MyPass_1234
      description: Login request body
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
      description: Page metadata
      example:
        size: 10
        number: 0
        totalElements: 2
        totalPages: 1
    PagedResponse:
      type: object
      properties:
        content:
          type: array
          description: List of expenses
          example:
          - id: fa0f58de-6ed9-4502-9b34-016d614aa5ab
            description: Purchase of new computer
            amount: 800.0
            date: 2025-06-30
            category: Electronics
          - id: 8ee69e72-11d2-495c-a9d5-5fe89a095e61
            description: Electricity and internet bill for the office
            amount: 120.0
            date: 2025-07-15
            category: Utilities
          items:
            $ref: "#/components/schemas/ExpenseResponse"
        metadata:
          $ref: "#/components/schemas/PageMetadata"
      description: Paged response body
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
